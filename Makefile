SHELL := /bin/bash


################################################################################
# Folders

SRC_DIR       := src
PREPROC_DIR   := src/preprocessing
LEARNING_DIR  := src/learning
COMMON_DIR    := src/common
CPP_SRC_DIRS  := $(SRC_DIR) $(PREPROC_DIR) $(LEARNING_DIR) $(COMMON_DIR)

# Directories for (temporary) output
TMP_CHECK     := tmp/check
TMP_INSTALL   := tmp/installOut


################################################################################
# Files

# timestamp when man files where last generated
DOC_UPDATE    := .doc-update
VERSION_FILES := DESCRIPTION R/ndl2.package.R

# C++ files which make use of Rcpp attributes (only possible in src/ folder)
IN_RCPP_ATTR  := $(shell grep Rcpp::export $(wildcard $(SRC_DIR)/*.cpp) \
                   $(wildcard $(SRC_DIR)/*.h) --files-with-match)
# One of the files generated by Rcpp's compileAttributes() function.
# Only include one file here as otherwise compileAttributes() is executed twice.
OUT_RCPP_ATTR := src/RcppExports.cpp

CPP_FILES     := $(foreach srcDir, $(CPP_SRC_DIRS), $(wildcard $(srcDir)/*.cpp)\
                   $(wildcard $(srcDir)/*.h) $(wildcard $(srcDir)/*.hpp))
R_FILES       := $(wildcard R/*.R)
ALL_FILES     := $(R_FILES) $(CPP_FILES) DESCRIPTION NAMESPACE .Rbuildignore \
                   $(DOC_UPDATE) src/Makevars src/Makevars.win


################################################################################
# Variables

R_CMD         := R --no-site-file --no-environ --no-save --no-restore CMD
VERSION       := $(shell grep -i ^VERSION DESCRIPTION | cut -d : -d \  -f 2)

# Matches version number strings in DESCRIPTION and R/ndl2.package.R
# This gives us the following refrences:
# \1 the string 'VERSION:' with prefix and suffix if any
# \2 major version
# \3 minor version
# \4 patch version
# \5 dot followed by dev version or empty
# \6 dev version (if existing)
# \7 the remaining line ('\cr' for R/ndl2.package.R)
VERSION_REGEX :=(.*Version:[^0-9]*)([0-9]*)\.([0-9]*)\.([0-9]*)(\.([0-9]*))?(.*)
NEW_DEV       := \1\2.\3.\4.$$newdev\7
NEW_PATCH     := \1\2.\3.$$newpatch\7
NEW_MINOR     := \1\2.$$newminor.0\7
NEW_MAJOR     := \1$$newmajor.0.0\7
VERSION_STRING:= \2.\3.\4\5

define R_TESTTHAT
library(devtools); \
suppressMessages(dev_mode(on=TRUE, path='$(TMP_INSTALL)')); \
suppressMessages(library(ndl2, quietly=TRUE)); \
library(testthat, quietly=TRUE);\
if (packageVersion('testthat') < "0.8") { \
  warning("testthat >= 0.8 required for all tests to work correctly."); \
}; \
test_dir('tests/testthat');
endef
export R_TESTTHAT


################################################################################
# Targets

.PHONY: all install installTmp doc tarball check test testAll clean distclean \
          major minor patch dev date

.SUFFIXES:


all: installTmp ndl2.tar.gz

installTmp: $(DOC_UPDATE) $(OUT_RCPP_ATTR)
	$(R_CMD) INSTALL --library=$(TMP_INSTALL) --install-tests .

$(OUT_RCPP_ATTR): $(IN_RCPP_ATTR)
	Rscript -e "Rcpp::compileAttributes()"
	@touch $(OUT_RCPP_ATTR)

tarball: ndl2.tar.gz

ndl2.tar.gz: $(ALL_FILES)
	rm -f ndl2.tar.gz
	rm -f ndl2_$(VERSION).tar.gz
	R --vanilla CMD build .
	ln -s ndl2_$(VERSION).tar.gz ndl2.tar.gz

install: $(DOC_UPDATE)
	Rscript -e "Rcpp::compileAttributes()"
	R --vanilla CMD INSTALL --with-keep.source .


doc: $(DOC_UPDATE)

$(DOC_UPDATE): $(R_FILES) $(OUT_RCPP_ATTR)
	Rscript -e "library(roxygen2); roxygenize('.')"
	@touch $(DOC_UPDATE)


check: $(DOC_UPDATE)
	Rscript -e "devtools::check(document=F, check_dir='$(TMP_CHECK)', cleanup=F)"

test: installTmp
	@echo "Starting testthat unit tests:"
	@Rscript -e "$$R_TESTTHAT"

testAll:
	$(MAKE) -C $(PREPROC_DIR) test
	$(MAKE) -C $(LEARNING_DIR) testAll
	$(MAKE) test
	$(MAKE) check


clean:
	rm -f src/*.o
	rm -f src/ndl2.so
	rm -rf $(TMP_CHECK)/* $(TMP_INSTALL)/*
	cp tmp/.gitignore $(TMP_INSTALL)/
	cp tmp/.gitignore $(TMP_INSTALL)/
	$(MAKE) -C $(PREPROC_DIR) cleanR
	$(MAKE) -C $(LEARNING_DIR) cleanR

distclean: clean
	$(MAKE) -C $(PREPROC_DIR) distclean
	$(MAKE) -C $(LEARNING_DIR) distclean
	rm -f $(DOC_UPDATE)


################################################################################
# Version number handling

major: date
	@echo "Old: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"
	@major=$$(sed -rn 's/$(VERSION_REGEX)/\2/p' DESCRIPTION); \
				newmajor=$$(($$major+1)); \
				sed -ri "s/$(VERSION_REGEX)/$(NEW_MAJOR)/" $(VERSION_FILES)
	@echo "New: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"

minor: date
	@echo "Old: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"
	@minor=$$(sed -rn 's/$(VERSION_REGEX)/\3/p' DESCRIPTION); \
				newminor=$$(($$minor+1)); \
				sed -ri "s/$(VERSION_REGEX)/$(NEW_MINOR)/" $(VERSION_FILES)
	@echo "New: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"

patch: date
	@echo "Old: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"
	@patch=$$(sed -rn 's/$(VERSION_REGEX)/\4/p' DESCRIPTION); \
				newpatch=$$(($$patch+1)); \
				sed -ri "s/$(VERSION_REGEX)/$(NEW_PATCH)/" $(VERSION_FILES)
	@echo "New: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"

dev: date
	@echo "Old: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"
	@dev=$$(sed -rn 's/$(VERSION_REGEX)/\6/p' DESCRIPTION); \
					if [ "$$dev" == "" ]; \
					then newdev="9000"; \
					else newdev=$$(($$dev+1)); \
				fi; \
				sed -ri "s/$(VERSION_REGEX)/$(NEW_DEV)/" $(VERSION_FILES)
	@echo "New: $$(sed -rn 's/$(VERSION_REGEX)/$(VERSION_STRING)/p' DESCRIPTION)"

date:
	@today=$$(date +%Y-%m-%d);\
				sed -ri "s/(.*Date:[^0-9]*)([0-9-]+)(.*)/\1$$today\3/" $(VERSION_FILES)
